{"version":3,"sources":["lookup/components.js","tweets/lookup.js","tweets/create.js","tweets/buttons.js","tweets/detail.js","tweets/list.js","tweets/components.js","serviceWorker.js","index.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","lookup","method","endpoint","callback","data","a","csrftoken","jsonData","JSON","stringify","response","obj","body","headers","fetch","status","window","location","href","ok","json","result","Error","console","log","newTweet","content","tweetId","action","id","username","TweetCreate","props","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","className","onSubmit","event","preventDefault","apiCreateTweet","current","value","ref","required","type","ActionButton","tweet","didPerformAction","likes","btnClass","actionDisplay","toUpperCase","handleActionBackend","display","onClick","apiTweetAction","ParentTweet","og_tweet","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","Fragment","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","apiGetTweets","handleDidRetweet","updatedTweetsInit","unshift","updatedFinalTweets","map","key","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiGetTweetDetail","Boolean","hostname","tweetsElement","getElementById","reactElement","createElement","MyTweetsComponent","setNewTweets","canTweet","tempNewTweets","dataset","ReactDOM","render","querySelectorAll","forEach","container","MyTweetDetailComponent","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e2f96bb.chunk.js","sourcesContent":["function getCookie(name) { // gets csrf cookie\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\n\nexport async function lookup(method, endpoint, callback, data) {\n  let jsonData;\n  const csrftoken = getCookie('csrftoken');\n  if (data) {\n    jsonData = JSON.stringify(data)\n  }\n  try {\n    let response = {};\n    if (method === 'POST') {\n      let obj = {\n        method: method,\n        body: jsonData,\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      }\n\n      if (csrftoken) {\n        obj.headers = {\n          'Content-Type': 'application/json',\n          \"X-CSRFToken\": csrftoken\n        }\n      }\n      response = await fetch(`http://localhost:8000/api/${endpoint}`, obj);\n      if (response.status === 403) {\n        window.location.href = \"/login?showLoginRequired=true\"\n      }\n    } else {\n      response = await fetch(`http://localhost:8000/api/${endpoint}`);\n    }\n    if (response.ok) {\n      let result = await response.json()\n      callback(result, response.status)\n    } else {\n      \n      throw new Error('Request Failed!');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import {lookup} from '../lookup'\n\n\nexport async function apiCreateTweet(newTweet, callback) {\n  lookup('POST', 'tweets/create-tweet/', callback, { content: newTweet })\n}\n\nexport async function apiTweetAction(tweetId, action, callback) {\n  lookup('POST', 'tweets/action/', callback, { id: tweetId, action: action })\n}\n\nexport async function apiGetTweets(username, callback) {\n  let endpoint = 'tweets/'\n  if (username) {\n    endpoint += `?username=${username}`\n  }\n  lookup('GET', endpoint, callback, [])\n}\n\nexport async function apiGetTweetDetail(tweetId, callback) {\n  lookup('GET', `tweets/${tweetId}`, callback, [])\n}","import React from 'react'\nimport { apiCreateTweet } from './lookup'\n\n\nexport function TweetCreate(props) {\n  const textAreaRef = React.createRef()\n  const { didTweet } = props\n  const handleBackendUpdate = (response, status) => {\n    if (status === 201) {\n      didTweet(response)\n    } else {\n      console.log(response)\n      alert(\"An error occured please try again\")\n    }\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    // backend api request\n    apiCreateTweet(newVal, handleBackendUpdate)\n    textAreaRef.current.value = ''\n  }\n  return <div className={props.className}>\n    <form onSubmit={handleSubmit}>\n      <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n      </textarea>\n      <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n    </form>\n  </div>\n}","import React from 'react';\nimport { apiTweetAction } from './lookup'\n\n\n\nexport function ActionButton(props) {\n  const { tweet, action, didPerformAction } = props\n  const likes = tweet.likes ? tweet.likes : 0\n  const className = action.btnClass ? action.btnClass : 'btn btn-primary btn-sm'\n  let actionDisplay = action.type ? action.type.toUpperCase() : 'Action'\n  if (tweet.likes >= 2 && action.type === 'like') {\n    actionDisplay += 'S'\n  }\n\n\n  const handleActionBackend = (response, status) => {\n    console.log(status, response)\n    if ((status === 200 || status === 201) && didPerformAction) {\n      didPerformAction(response, status)\n    }\n  }\n  const handleClick = (event) => {\n    event.preventDefault()\n    apiTweetAction(tweet.id, action.type, handleActionBackend)\n\n  }\n  const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n  return <button className={className} id={`${action.type}_${tweet.id}`} onClick={handleClick}>{display} </button>\n}\n","import React, { useState } from 'react';\nimport { ActionButton } from './buttons'\n\n\n\n\nexport function ParentTweet(props) {\n  const { tweet } = props\n  return tweet.og_tweet ? <div className='row'>\n    <div className='col-11 mx-auto p-3 border rounded'>\n      <Tweet hideActions className={'mx-1'} tweet={tweet.og_tweet} />\n      <p className='mb-0 small text-muted'>Retweet</p>\n    </div>\n  </div> : null\n}\n\nexport function Tweet(props) {\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6 bg-light';\n  const { tweet, didRetweet, hideActions } = props;\n  const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n\n  const path = window.location.pathname\n  const match = path.match(/(?<tweetid>\\d+)/)\n  const urlTweetId = match ? match.groups.tweetid : -1\n\n  \n  const isDetail = `${tweet.id}` === `${urlTweetId}`\n\n  const handleLink = (event) => {\n    event.preventDefault()\n    window.location.href = `/${tweet.id}`\n  }\n\n\n  const handlePerformAction = (newActionTweet, status) => {\n    if (status === 200) {\n      setActionTweet(newActionTweet)\n    } else if (status === 201) {\n      if (didRetweet) {\n        didRetweet(newActionTweet)\n      }\n    }\n  }\n  return <div className={className}>\n    <div>\n      <p>{tweet.id} - {tweet.content}</p>\n      <ParentTweet tweet={tweet} />\n\n    </div>\n\n    <div className='btn btn-group'>\n      <span className='bg-light p-2 border'>\n        {actionTweet && hideActions !== true && <React.Fragment>\n          <ActionButton tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'like', btnClass: 'btn btn-primary btn-sm ml-1' }} />\n          <ActionButton tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'unlike', btnClass: 'btn btn-primary btn-sm ml-1' }} />\n          <ActionButton tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'retweet', btnClass: 'btn btn-outline-success btn-sm ml-1' }} />\n        </React.Fragment>}\n        \n        {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm ml-1' onClick={handleLink}>View</button>}\n      </span>\n    </div>\n  </div>\n}","import React, { useState, useEffect } from 'react';\nimport {Tweet} from './detail'\nimport { apiGetTweets} from './lookup'\n\n\n\n\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([])\n  const [tweets, setTweets] = useState([])\n  const [tweetsDidSet, setTweetsDidSet] = useState(false)\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length) {\n      setTweets(final)\n    }\n\n  }, [props.newTweets, tweetsInit, tweets])\n\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetRefresh = (response, status) => {\n        if (status === 200) {\n          setTweetsInit(response)\n          setTweetsDidSet(true)\n        }\n      }\n      apiGetTweets(props.username, handleTweetRefresh)\n    }\n  }, [tweetsInit, setTweetsDidSet, tweetsDidSet, props.username])\n\n\n  const handleDidRetweet = (newTweet) => {\n    const updatedTweetsInit = [...tweetsInit]\n    updatedTweetsInit.unshift(newTweet)\n    setTweetsInit(updatedTweetsInit)\n\n    const updatedFinalTweets = [...tweets]\n    updatedFinalTweets.unshift(tweets)\n    setTweets(updatedFinalTweets)\n  }\n\n  return tweets.map((tweet) => {\n    return <Tweet tweet={tweet} didRetweet={handleDidRetweet} key={tweet.id} className='mx-2' />\n  })\n\n\n}\n","\nimport React, { useEffect, useState } from 'react'\n\nimport { TweetCreate } from './create'\nimport { TweetsList } from './list'\nimport { apiGetTweetDetail } from './lookup'\nimport { Tweet } from './detail'\n\n\nexport function TweetsComponent(props) {\n  const [newTweets, setNewTweets] = useState([])\n  const canTweet = props.canTweet === \"false\" ? false : true\n  const handleNewTweet = (newTweet) => {\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift(newTweet)\n    setNewTweets(tempNewTweets)\n  }\n  return <div className={props.className}>\n    {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n    <TweetsList newTweets={newTweets} {...props} />\n  </div>\n}\n\nexport function TweetDetailComponent(props) {\n  const {tweetId} = props\n  const [didLookup, setDidLookup] = useState(false)\n  const [tweet, setTweet] = useState(null)\n  const handleBackendLookup = (response, status) => {\n    if (status === 200) {\n      setTweet(response)\n    } else {\n      alert('There was an error finding your tweet')\n    }\n  } \n  useEffect(() => {\n    if(didLookup === false) {\n      setDidLookup(true)\n      apiGetTweetDetail(tweetId, handleBackendLookup)\n    }\n  }, [didLookup, setDidLookup, tweetId])\n\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className}/>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { TweetsComponent, TweetDetailComponent } from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst tweetsElement = document.getElementById('tweets')\n\nconst reactElement = React.createElement\n\nif (tweetsElement) {\n  const MyTweetsComponent = reactElement(TweetsComponent, tweetsElement.dataset)\n  ReactDOM.render(MyTweetsComponent, tweetsElement);\n}\n\nconst tweetDetailElement = document.querySelectorAll('.tweet-detail')\n\ntweetDetailElement.forEach(container => {\n  const MyTweetDetailComponent = reactElement(TweetDetailComponent, container.dataset)\n  ReactDOM.render(MyTweetDetailComponent, container);\n})\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}