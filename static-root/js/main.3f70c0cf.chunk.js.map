{"version":3,"sources":["lookup/components.js","tweets/components.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["url","callback","a","fetch","response","ok","json","result","status","Error","console","log","Tweet","props","className","tweet","id","content","LikesCount","ActionButton","action","type","btnClass","TweetsComponent","textAreaRef","React","createRef","useState","newTweets","setNewTweets","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","likes","ref","name","required","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","getData","map","key","actionDisplay","toUpperCase","onClick","App","src","logo","alt","Boolean","window","location","hostname","match","appElement","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.3f70c0cf.chunk.js","sourcesContent":["const url = 'http://localhost:8000/api/tweets/';\n\nexport async function getData(callback) {\n  try {\n    const response = await fetch(url);\n    if (response.ok) {\n      let result = await response.json()\n      callback(result, response.status)\n    } else {\n      throw new Error('Request Failed!');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}","import React, {useState, useEffect} from 'react';\nimport {getData} from '../lookup'\n\n\nexport function Tweet(props) {\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\n  const { tweet } = props;\n  return <div className={className}>\n    <p>{tweet.id} - {tweet.content}</p>\n    <div className='btn btn-group'>\n      <span className='bg-light p-2 border'>\n        <LikesCount tweet={tweet} />\n        <ActionButton tweet={tweet} action={{ type: 'like', btnClass: 'btn btn-primary btn-sm ml-1'}}/>\n        <ActionButton tweet={tweet} action={{ type: 'unlike', btnClass: 'btn btn-primary btn-sm ml-1' }}/>\n        <ActionButton tweet={tweet} action={{ type: 'retweet', btnClass: 'btn btn-outline-success btn-sm ml-1' }}/>\n      </span>\n    </div>\n  </div>\n}\n\nexport function TweetsComponent(props) {\n  const textAreaRef = React.createRef()\n  const [newTweets, setNewTweets] = useState([])\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift({\n      content: newVal,\n      likes: 0,\n      id:12515\n    })\n    setNewTweets(tempNewTweets)\n    textAreaRef.current.value = ''\n  }\n  return <div className={props.className}>\n    <div className='col-12'>\n      <form onSubmit={handleSubmit}>\n        <textarea ref={textAreaRef} className='form-control' name='tweet' required={true}>\n\n\n        </textarea>\n        <button type='submit'  className='btn btn-primary my-3'>Tweet</button>\n      </form>\n    </div>\n    <TweetsList newTweets={newTweets} />\n  </div>\n}\n\n\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([])\n  const [tweets, setTweets] = useState([])\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length) {\n      setTweets(final)\n    }\n\n  }, [props.newTweets, tweetsInit, tweets])\n\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      if (status === 200) {\n        setTweetsInit(response)\n      }\n    }\n    getData(myCallback)\n  }, [])\n\n  return tweets.map((tweet) => {\n    return <Tweet tweet={tweet} key={tweet.id} className='single-tweet-div' />\n  })\n\n\n}\n\n\n\nexport function ActionButton(props) {\n  const { tweet, action } = props\n  const className = action.btnClass ? action.btnClass : 'btn btn-primary btn-sm'\n  const actionDisplay = action.type ? action.type.toUpperCase() : 'Action'\n  const handleClick = (event) => {\n    event.preventDefault()\n    if (action.type === 'like') {\n      \n    }\n  }\n  return <button className={className} id={`${action.type}_${tweet.id}`} onClick={handleClick}>{actionDisplay} </button>\n}\n\nexport function LikesCount(props) {\n  const { tweet } = props\n  return <label className='badge badge-light'>{tweet.likes}</label>\n}\n","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { TweetsComponent } from './tweets'\n\n\n\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n          \n      </header>\n    </div>\n  );\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst appElement = document.getElementById('root')\n\nif (appElement) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appElement\n  );\n}\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}