{"version":3,"sources":["lookup/components.js","tweets/lookup.js","tweets/create.js","tweets/buttons.js","profiles/components.js","tweets/detail.js","tweets/list.js","tweets/feed.js","tweets/components.js","serviceWorker.js","index.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","lookup","method","endpoint","callback","data","a","csrftoken","jsonData","JSON","stringify","response","obj","body","headers","fetch","status","window","location","href","indexOf","ok","json","result","Error","console","log","newTweet","content","tweetId","action","id","apiGetTweets","username","nextUrl","undefined","replace","apiGetTweetsFeed","TweetCreate","props","textAreaRef","React","createRef","didTweet","handleBackendUpdate","alert","className","onSubmit","event","preventDefault","apiCreateTweet","current","value","ref","required","type","ActionButton","tweet","didPerformAction","likes","btnClass","actionDisplay","toUpperCase","handleActionBackend","display","onClick","apiTweetAction","UserLink","author","includeFullName","nameDisplay","first_name","last_name","Fragment","style","cursor","UserPicture","ParentTweet","retweeter","og_tweet","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","next","results","handleDidRetweet","updatedTweetsInit","unshift","updatedFinalTweets","map","key","TweetsListFeed","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiGetTweetDetail","Boolean","hostname","tweetsElement","getElementById","reactElement","createElement","MyTweetsComponent","setNewTweets","canTweet","tempNewTweets","dataset","ReactDOM","render","tweetsFeedElement","querySelectorAll","forEach","container","MyTweetDetailComponent","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a432f74c.chunk.js","sourcesContent":["function getCookie(name) { // gets csrf cookie\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\n\nexport async function lookup(method, endpoint, callback, data) {\n  let jsonData;\n  const csrftoken = getCookie('csrftoken');\n  if (data) {\n    jsonData = JSON.stringify(data)\n  }\n  try {\n    let response = {};\n    if (method === 'POST') {\n      let obj = {\n        method: method,\n        body: jsonData,\n        headers: {\n          'Content-Type': 'text/plain',\n        }\n      }\n\n      if (csrftoken) {\n        obj.headers = {\n          'Content-Type': 'text/plain',\n          \"X-CSRFToken\": csrftoken\n        }\n      }\n      response = await fetch(`http://localhost:8000/api/${endpoint}`, obj)\n\n      if (response.status === 403) {\n        if (window.location.href.indexOf(\"login\") === -1) {\n          window.location.href = \"/login?showLoginRequired=true\"\n        }\n      }\n    } else {\n      response = await fetch(`http://localhost:8000/api/${endpoint}`);\n\n    }\n    if (response.ok) {\n      let result = await response.json()\n      callback(result, response.status)\n    } else {\n      \n      throw new Error('Request Failed!');\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import {lookup} from '../lookup'\n\n\nexport async function apiCreateTweet(newTweet, callback) {\n  lookup('POST', 'tweets/create-tweet/', callback, { content: newTweet })\n}\n\nexport async function apiTweetAction(tweetId, action, callback) {\n  lookup('POST', 'tweets/action/', callback, { id: tweetId, action: action })\n}\n\nexport async function apiGetTweets(username, callback, nextUrl) {\n  let endpoint = 'tweets/'\n  if (username) {\n    endpoint += `?username=${username}`\n  }\n  if (nextUrl !== null && nextUrl !== undefined) {\n    endpoint = nextUrl.replace(\"http://localhost:8000/api/\", \"\")\n  }\n  lookup('GET', endpoint, callback, [])\n}\n\nexport async function apiGetTweetsFeed(callback, nextUrl) {\n  let endpoint = 'tweets/feed/'\n  if (nextUrl !== null && nextUrl !== undefined) {\n    endpoint = nextUrl.replace(\"http://localhost:8000/api/\", \"\")\n  }\n  lookup('GET', endpoint, callback, [])\n}\n\nexport async function apiGetTweetDetail(tweetId, callback) {\n  lookup('GET', `tweets/${tweetId}`, callback, [])\n}","import React from 'react'\nimport { apiCreateTweet } from './lookup'\n\n\nexport function TweetCreate(props) {\n  const textAreaRef = React.createRef()\n  const { didTweet } = props\n  const handleBackendUpdate = (response, status) => {\n    if (status === 201) {\n      didTweet(response)\n    } else {\n      console.log(response)\n      alert(\"An error occured please try again\")\n    }\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    const newVal = textAreaRef.current.value\n    // backend api request\n    apiCreateTweet(newVal, handleBackendUpdate)\n    textAreaRef.current.value = ''\n  }\n  return <div className={props.className}>\n    <form onSubmit={handleSubmit}>\n      <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\n\n      </textarea>\n      <button type='submit' className='btn btn-primary my-3'>Tweet</button>\n    </form>\n  </div>\n}","import React from 'react';\nimport { apiTweetAction } from './lookup'\n\n\n\nexport function ActionButton(props) {\n  const { tweet, action, didPerformAction } = props\n  const likes = tweet.likes ? tweet.likes : 0\n  const className = action.btnClass ? action.btnClass : 'btn btn-primary btn-sm'\n  let actionDisplay = action.type ? action.type.toUpperCase() : 'Action'\n  if (tweet.likes >= 2 && action.type === 'like') {\n    actionDisplay += 'S'\n  }\n\n\n  const handleActionBackend = (response, status) => {\n    console.log(status, response)\n    if ((status === 200 || status === 201) && didPerformAction) {\n      didPerformAction(response, status)\n    }\n  }\n  const handleClick = (event) => {\n    event.preventDefault()\n    apiTweetAction(tweet.id, action.type, handleActionBackend)\n\n  }\n  const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n  return <button className={className} id={`${action.type}_${tweet.id}`} onClick={handleClick}>{display} </button>\n}\n","import React from 'react';\n\n\n\nexport function UserLink(props) {\n  let { author, includeFullName } = props\n  author = author ? author : {}\n  const nameDisplay = includeFullName && `${author.first_name} ${author.last_name} `\n\n  const handleUserLink = (event) => {\n    event.preventDefault()\n    window.location.href = `/profile/${author.username}`\n  }\n  return author !== {} &&\n    <React.Fragment>\n      <p className=' text-muted'>\n        {nameDisplay}\n        <span className='' style={{ cursor: 'pointer' }} onClick={handleUserLink}>@{author.username}</span>\n      </p></React.Fragment>\n}\n\nexport function UserPicture(props) {\n  let { author } = props\n  author = author ? author : {}\n  return <span className='mx-1 px-3 py-2 rounded-circle bg-dark text-white'>\n    {author[0]}\n  </span>\n}","import React, { useState } from 'react';\nimport { ActionButton } from './buttons'\nimport {UserLink, UserPicture} from '../profiles'\n\n\nexport function ParentTweet(props) {\n  const { tweet, retweeter } = props\n  return tweet.og_tweet ? <div className='row'>\n    <div className='col-11 mx-2 p-3 border rounded'>\n      <Tweet hideActions className={'mx-1'} tweet={tweet.og_tweet} />\n      <span className='mb-0 small text-muted'>Retweet from <UserLink author={retweeter} includeFullName={false}/></span>\n    </div>\n  </div> : null\n}\n\nexport function Tweet(props) {\n  const className = props.className ? props.className : 'col-10 mx-auto col-md-6 bg-light';\n  const { tweet, didRetweet, hideActions } = props;\n  const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n  const path = window.location.pathname\n  const match = path.match(/(?<tweetid>\\d+)/)\n  const urlTweetId = match ? match.groups.tweetid : -1\n  \n  const isDetail = `${tweet.id}` === `${urlTweetId}`\n\n  const handleLink = (event) => {\n    event.preventDefault()\n    window.location.href = `/${tweet.id}`\n  }\n\n\n  const handlePerformAction = (newActionTweet, status) => {\n    if (status === 200) {\n      setActionTweet(newActionTweet)\n    } else if (status === 201) {\n      if (didRetweet) {\n        didRetweet(newActionTweet)\n      }\n    }\n  }\n  return <div className={className}>\n    <div className='d-flex'>\n      <div className=''>\n        <UserPicture author={tweet.author}/>\n      </div>\n      <div className='col-11'>\n\n      \n    <div className='ml-2'>\n      {tweet.author ? <UserLink author={tweet.author} includeFullName={true} /> : <span className='col-1 mb-6'></span>}\n      <p>{tweet.content}</p>\n      <ParentTweet retweeter={tweet.author} tweet={tweet}/>\n\n    </div>\n\n      <div className='btn btn-group px-0'>\n      <span className='bg-light p-2 border rounded'>\n        {actionTweet && hideActions !== true && <React.Fragment>\n          <ActionButton tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'like', btnClass: 'btn btn-primary btn-sm ml-1' }} />\n          <ActionButton tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'unlike', btnClass: 'btn btn-primary btn-sm ml-1' }} />\n          <ActionButton tweet={actionTweet} didPerformAction={handlePerformAction} action={{ type: 'retweet', btnClass: 'btn btn-outline-success btn-sm ml-1' }} />\n        </React.Fragment>}\n        \n        {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm ml-1' onClick={handleLink}>View</button>}\n      </span>\n    </div>\n    </div>\n    </div>\n  </div>\n}","import React, { useState, useEffect } from 'react';\nimport {Tweet} from './detail'\nimport { apiGetTweets} from './lookup'\n\n\n\n\nexport function TweetsList(props) {\n  const [tweetsInit, setTweetsInit] = useState([])\n  const [tweets, setTweets] = useState([])\n  const [nextUrl, setNextUrl] = useState(null)\n  const [tweetsDidSet, setTweetsDidSet] = useState(false)\n  useEffect(() => {\n    const final = [...props.newTweets].concat(tweetsInit)\n    if (final.length !== tweets.length) {\n      setTweets(final)\n    }\n\n  }, [props.newTweets, tweetsInit, tweets])\n\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetRefresh = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next)\n          setTweetsInit(response.results)\n          setTweetsDidSet(true)\n          setTweets(response.results)\n        }\n      }\n      apiGetTweets(props.username, handleTweetRefresh, nextUrl)\n    }\n  }, [tweetsInit, setTweetsDidSet, tweetsDidSet, props.username, nextUrl])\n\n\n  const handleDidRetweet = (newTweet) => {\n    const updatedTweetsInit = [...tweetsInit]\n    updatedTweetsInit.unshift(newTweet)\n    setTweetsInit(updatedTweetsInit)\n\n    const updatedFinalTweets = [...tweets]\n    updatedFinalTweets.unshift(tweets)\n    setTweets(updatedFinalTweets)\n  }\n\n  const handleLoadNext = (event) => {\n    event.preventDefault()\n    if (nextUrl !== null) {\n      const handleLoadNextResponse = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next)\n          const newTweets = [...tweets].concat(response.results)\n          setTweetsInit(newTweets)\n          setTweets(newTweets)\n        }\n      }\n      apiGetTweets(props.username, handleLoadNextResponse, nextUrl)\n    }\n  }\n\n  return <React.Fragment>{tweets.map((tweet) => {\n    return <Tweet tweet={tweet} didRetweet={handleDidRetweet} key={tweet.id} className='mx-3 py-1 my-3' />\n    })}\n    { nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button>}\n  </React.Fragment>\n}\n","import React, { useState, useEffect } from 'react';\nimport { Tweet } from './detail'\nimport { apiGetTweetsFeed } from './lookup'\n\n\n\n\nexport function TweetsListFeed(props) {\n  const [tweetsInit, setTweetsInit] = useState([])\n  const [tweets, setTweets] = useState([])\n  const [nextUrl, setNextUrl] = useState(null)\n  const [tweetsDidSet, setTweetsDidSet] = useState(false)\n  // useEffect(() => {\n  //   const final = [...props.newTweets].concat(tweetsInit)\n  //   if (final.length !== tweets.length) {\n  //     setTweets(final)\n  //   }\n\n  // }, [props.newTweets, tweetsInit, tweets])\n\n  useEffect(() => {\n    if (tweetsDidSet === false) {\n      const handleTweetRefresh = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next)\n          setTweetsInit(response.results)\n          setTweetsDidSet(true)\n          setTweets(response.results)\n        }\n      }\n      apiGetTweetsFeed(handleTweetRefresh, nextUrl)\n    }\n  }, [tweetsInit, setTweetsDidSet, tweetsDidSet, nextUrl])\n\n\n  const handleDidRetweet = (newTweet) => {\n    const updatedTweetsInit = [...tweetsInit]\n    updatedTweetsInit.unshift(newTweet)\n    setTweetsInit(updatedTweetsInit)\n\n    const updatedFinalTweets = [...tweets]\n    updatedFinalTweets.unshift(tweets)\n    setTweets(updatedFinalTweets)\n  }\n\n  const handleLoadNext = (event) => {\n    event.preventDefault()\n    if (nextUrl !== null) {\n      const handleLoadNextResponse = (response, status) => {\n        if (status === 200) {\n          setNextUrl(response.next)\n          const newTweets = [...tweets].concat(response.results)\n          setTweetsInit(newTweets)\n          setTweets(newTweets)\n        }\n      }\n      apiGetTweetsFeed(handleLoadNextResponse, nextUrl)\n    }\n  }\n\n  return <React.Fragment>{tweets.map((tweet) => {\n    return <Tweet tweet={tweet} didRetweet={handleDidRetweet} key={tweet.id} className='mx-3 py-1 my-3' />\n  })}\n    {nextUrl !== null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load next</button>}\n  </React.Fragment>\n}\n","\nimport React, { useEffect, useState } from 'react'\n\nimport { TweetCreate } from './create'\nimport { TweetsList } from './list'\nimport { TweetsListFeed} from './feed'\nimport { apiGetTweetDetail } from './lookup'\nimport { Tweet } from './detail'\n\nexport function FeedComponent(props) {\n  const [newTweets, setNewTweets] = useState([])\n  const canTweet = props.canTweet === \"false\" ? false : true\n  const handleNewTweet = (newTweet) => {\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift(newTweet)\n    setNewTweets(tempNewTweets)\n  }\n  return <div className={props.className}>\n    {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n    <TweetsListFeed newTweets={newTweets} {...props} />\n  </div>\n}\n\nexport function TweetsComponent(props) {\n  const [newTweets, setNewTweets] = useState([])\n  const canTweet = props.canTweet === \"false\" ? false : true\n  const handleNewTweet = (newTweet) => {\n    let tempNewTweets = [...newTweets]\n    tempNewTweets.unshift(newTweet)\n    setNewTweets(tempNewTweets)\n  }\n  return <div className={props.className}>\n    {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\n    <TweetsList newTweets={newTweets} {...props} />\n  </div>\n}\n\nexport function TweetDetailComponent(props) {\n  const {tweetId} = props\n  const [didLookup, setDidLookup] = useState(false)\n  const [tweet, setTweet] = useState(null)\n  const handleBackendLookup = (response, status) => {\n    if (status === 200) {\n      setTweet(response)\n    } else {\n      alert('There was an error finding your tweet')\n    }\n  } \n  useEffect(() => {\n    if(didLookup === false) {\n      setDidLookup(true)\n      apiGetTweetDetail(tweetId, handleBackendLookup)\n    }\n  }, [didLookup, setDidLookup, tweetId])\n\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { TweetsComponent, TweetDetailComponent, TweetsListFeed } from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst tweetsElement = document.getElementById('tweets')\n\nconst reactElement = React.createElement\n\nif (tweetsElement) {\n  const MyTweetsComponent = reactElement(TweetsComponent, tweetsElement.dataset)\n  ReactDOM.render(MyTweetsComponent, tweetsElement);\n}\n\n\nconst tweetsFeedElement = document.getElementById('tweets-feed')\nif (tweetsFeedElement) {\n  const MyTweetsComponent = reactElement(TweetsListFeed, tweetsFeedElement.dataset)\n  ReactDOM.render(MyTweetsComponent, tweetsFeedElement);\n}\n\nconst tweetDetailElement = document.querySelectorAll('.tweet-detail')\n\ntweetDetailElement.forEach(container => {\n  const MyTweetDetailComponent = reactElement(TweetDetailComponent, container.dataset)\n  ReactDOM.render(MyTweetDetailComponent, container);\n})\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}